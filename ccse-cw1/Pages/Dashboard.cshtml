@page
@model ccse_cw1.Pages.DashboardModel
@{
}

<style>
    .booking-section table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .booking-section th, .booking-section td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    .booking-section th {
        background-color: #f2f2f2;
    }

    .booking-section button {
        margin-right: 5px;
    }
</style>

@if (Model.bookings == null || Model.bookings.Count == 0)
{
    <div class="container">
        <div class="row">
            <div class="col-md-12 text-center mt-5">
                <h3>No bookings found.</h3>
                <p>It looks like you haven't made any bookings yet. Click <a href="/Book">here</a> to explore available options and make a booking.</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-2 col-lg-2 d-md-block bg-light sidebar">
                <div class="sidebar-sticky">
                    <h5 class="text-center mt-3">Bookings</h5>
                    <div class="list-group">
                        @foreach (var booking in Model.bookings)
                        {
                            <a id="@($"booking-{booking.Id}")" href="#" class="list-group-item list-group-item-action" onclick="showBooking(this.id)">
                                @if(booking.Cancelled)
                                {
                                    <h6 class="mb-1"><strong>Cancelled:</strong> @Model.GenerateHumanReadableTitle(booking)</h6>
                                }
                                else
                                {
                                    <h6 class="mb-1">@Model.GenerateHumanReadableTitle(booking)</h6>
                                }
                                <h7 class="mb-1">@booking.BookingDate</h7><br />
                                <small>Check-in: @Model.GenerateFirstCheckin(booking).ToString("yyyy-MM-dd")</small>
                                <small>Check-out: @Model.GenerateLastCheckout(booking).ToString("yyyy-MM-dd")</small>
                                <small>Total Price: £@booking.TotalPrice</small>
                            </a>
                        }
                    </div>
                </div>
            </nav>

            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4 position-relative">
                <header class="bg-dark bg-gradient rounded text-center p-3 text-white">
                    <h1>Dashboard</h1>
                </header>

                <div class="mt-4">
                    @foreach (var booking in Model.bookings)
                    {
                        <section id="booking-@booking.Id-details" class="booking-section" style="display: none">
                            <table>
                                <tr>
                                    <th>Booking Type</th>
                                    <th>Details</th>
                                    <th>Cost (Nightly/Duration)</th>
                                </tr>

                                @if (booking.RoomBookings != null)
                                {
                                    @foreach (var roomBooking in booking.RoomBookings)
                                    {
                                        <tr>
                                            <td>Hotel Booking</td>
                                            <td>
                                                @if (roomBooking.Room?.Hotel != null)
                                                {
                                                    <strong>Hotel:</strong> @roomBooking.Room.Hotel.Name
                                                    <br>
                                                }
                                                <strong>Room Type:</strong> @roomBooking.Room?.RoomType<br>
                                                <strong>Check-in Date:</strong> @roomBooking.CheckInDate.ToString("yyyy-MM-dd")<br>
                                                <strong>Check-out Date:</strong> @roomBooking.CheckOutDate.ToString("yyyy-MM-dd")
                                            </td>
                                            <td>£@(roomBooking.Room?.Price ?? 0)</td>
                                        </tr>
                                    }
                                }

                                @if (booking.TourBooking != null)
                                {
                                    <tr>
                                        <td>Tour Booking</td>
                                        <td>
                                            <strong>Tour:</strong> @booking.TourBooking.Tour.Name<br>
                                            <strong>Description:</strong> @(booking.TourBooking.Tour.Description)<br>
                                            <strong>Start Date:</strong> @(booking.TourBooking.CheckInDate.ToString("yyyy-MM-dd"))<br>
                                            <strong>Duration:</strong> @booking.TourBooking.Tour.Duration Days
                                        </td>
                                        <td>£@booking.TourBooking.Tour.Price</td>
                                    </tr>
                                }

                                <tr class="total-row">
                                    <td><strong>Discount:</strong></td>
                                    <td id="totalDiscountAmount">£@(booking.Discount?.Amount ?? 0)</td>
                                </tr>

                                <tr class="total-row">
                                    <td><strong>Grand Total:</strong></td>
                                    @if (booking.Cancelled)
                                    {
                                        <td id="grandTotal">£50 (Cancellation Fee)</td>                                        
                                    }
                                    else
                                    {
                                        <td id="grandTotal">£@booking.TotalPrice</td>                                        
                                    }
                                </tr>
                            </table>
                            @if (!booking.Confirmed && !booking.Cancelled)
                            {
                                <button class="btn btn-success" onclick="payBooking(@booking.Id)">Pay</button>
                            }
                            @if (booking.CanModify && !booking.Cancelled)
                            {
                                <button class="btn btn-secondary" onclick="modifyBooking(@booking.TourBookingId)">Modify</button>
                            }
                            @if (booking.CanCancel() && !booking.Cancelled)
                            {
                                <button class="btn btn-danger" onclick="cancelBooking(@booking.Id)">Cancel</button>
                            }
                        </section>
                    }
                </div>
            </main>

        </div>
    </div>

}

<script>
    // output result of cancel api endpoint request
    function renderCancelResponse(data) {
        if (data.status == 200) {
            alert("Successfully canceled booking")
        }
        else {
            alert("booking cancellation failed!")
        }
        location.reload();
    }

    // do request to pay api endpoint
    function cancelBooking(bookingId) {
        var input = {
            BookingId: bookingId
        };

        fetch('/api/Bookings/Cancel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(input)
        })
            .then(data => {
                renderCancelResponse(data);
            })
            .catch(error => {
                console.error('Error sending cancellation data', error);
            });
    }

    // output result of payment api endpoint request
    function renderPaymentResponse(data)
    {
        if (data.status == 200) {
            alert("Successfully paid for booking")
        }
        else
        {
            alert("Payment for booking failed!")
        }
        location.reload();
    }

    // do request to pay api endpoint
    function payBooking(bookingId)
    {
        var input = {
            BookingId: bookingId
        };

        fetch('/api/Bookings/Pay', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(input)
        })
        .then(data => {
            renderPaymentResponse(data);
        })
        .catch(error => {
            console.error('Error sending payment data', error);
        });
    }

    function showBooking(bookingId) {
        // revert all css to default
        var links = document.querySelectorAll('.list-group a');
        links.forEach(function (link) {
            link.classList.remove('active');
        });

        document.querySelectorAll('.booking-section').forEach(section => {
            section.style.display = 'none';
        });

        // css to change for the selected booking
        document.getElementById(bookingId).classList.add('active');

        var bookingIdDetails = bookingId + "-details";
        document.getElementById(bookingIdDetails).style.display = 'block';
    }
</script>